# vim: set ft=sh :
# change working directory
cd /tmp

# silent wrappers for pushd and popd
pushd() {
  builtin pushd "$@" 1>/dev/null
}
popd() {
  builtin popd "$@" 1>/dev/null
}

# execute actions on exit
on-exit() {
  status=$?

  # warn about not successful status
  [[ $status != 0 ]] && echo "Script `basename $0` exited with status $status"

  exit $status
}
trap on-exit EXIT

# install packages silently if they were not installed already
install() {
  # build list of packages to install that were not yet installed 
  local packages=
  local args=
  for arg in $@; do
    if [[ $arg == -* ]]; then
      args="$args $arg"
    else
      version=`dpkg-query -W -f '${Version}' $arg 2>/dev/null || true`
      [[ -z $version ]] && packages="$packages $arg"
    fi
  done

  # install packages from list using apt-get
  [[ -n ${NON_INTERACTIVE:-} ]] && args="-y $args"
  [[ -n $packages ]] && DEBIAN_FRONTEND=noninteractive sudo -E apt-get install $args $packages || true
}

# purge packages silently only if they are installed
uninstall() {
  # build list of packages to remove that are installed
  packages=""
  for p in $@; do
    version=`dpkg-query -W -f '${Version}' $p 2>/dev/null || true`
    [[ -n $version ]] && packages="$packages $p"
  done

  if [[ -n $packages ]]; then
    # remove packages from list using apt-get
    args=
    [[ -n ${NON_INTERACTIVE:-} ]] && args="-y"
    sudo apt-get purge $args $packages
    sudo apt-get autoremove -qq --purge
  fi
}

# update packages from source list
apt-update-list() {
  list_path=$1

  sudo apt-get update -o Dir::Etc::sourcelist=$list_path -o Dir::Etc::sourceparts=- -o APT::Get::List-Cleanup=0
}

# add PPA source silently if it was not added already
add-ppa() {
  ppa=$1
  list_name=${ppa//\//-}
  list_name=${list_name//./_}-`lsb_release -sc`.list
  list_path=/etc/apt/sources.list.d/$list_name

  if [[ ! -f $list_path ]]; then
    sudo add-apt-repository -y ppa:$ppa
    # override release name
    [[ -n ${release:-} ]] && sudo perl -pe "s/^(.+? .+?) .+? /\1 $release /" -i $list_path
    # update packages from added soruce list
    apt-update-list $list_path
  fi
}

# download the file if it was not downloaded already
download() {
  url=$1
  md5=$2
  basename=`basename "$url"`
  output=${3:-$basename}

  if [[ ! -f "$output" || `md5sum "$output" 2>/dev/null | cut -d' ' -f1` != "$md5" ]]; then
    rm -f "$output"

    # download the file using the preferred download command
    case ${engine:-} in
      wget) download_cmd="wget -O" ;;
      '') download_cmd="axel -a -n3 -o" ;;
    esac
    $download_cmd "$output" "$url"
  fi
}

# check md5 sums of files for latter usage
md5_paths=
md5_sum=
md5-check() {
  [[ $# > 0 ]] && md5_paths=("$@")
  md5_sum=`md5sum "${md5_paths[@]}" 2>/dev/null || true`
}

# check if md5 sums of previously checked files were changed
md5-changed() {
  prev_md5_sum="$md5_sum"

  md5-check
  [[ "$prev_md5_sum" != "$md5_sum" ]]
}

# write stdin to file as root
write-file() {
  path=$1
  sudo_cmd="sudo -u ${user:-root}"
  dir=`dirname "$path"`

  $sudo_cmd mkdir -p "$dir"
  $sudo_cmd tee "$path" 1>/dev/null
  [[ -n ${executable:-} ]] && $sudo_cmd chmod +x "$path" || true
}

# write stdin to executable file as root
write-script() {
  executable=1 write-file "$@"
}

# unpack archives of various format
unpack() {
  for path in "$@"; do
    _path=$path
    [[ -n ${format:-} ]] && _path=.$format
    case $_path in
      *.tar.gz | *.tgz) tar xzf "$path" ;;
      *.tar.bz2) tar xjf "$path" ;;
      *.zip) unzip -qo "$path" ;;
      *.cab) cabextract "$path" ;;
      *) echo "Unknown extension for unpack: $extension"; exit 1 ;;
    esac
  done
}

# unpack downloaded archives by download URLs
unpack-downloaded() {
  for url in "$@"; do
    unpack "`basename "$url"`"
  done
}

# remove files with confirmation by default
remove() {
  for path in "$@"; do
    if [[ -a $path ]]; then
      if [[ -z ${noconfirm:-} ]]; then
        [[ -a $path ]] && { echo "Script is about to delete $path"; sudo rm -rI "$path"; }
      else
        sudo rm -r "$path"
      fi
    fi
  done
}

# move file to new place as root
move() {
  [[ $# > 2 ]] && { echo "Provided more than two arguments to move function"; exit 1; }
  source=$1
  dest=$2

  # check if destination contains trailing slash
  [[ $dest == */ ]] && dest="$dest`basename "$source"`"
  
  # remove destination, move source to destination and change owner
  remove "$dest"
  sudo mv "$source" "$dest"
  user=${user:-root}
  sudo chown -R $user:$user "$dest"
}

